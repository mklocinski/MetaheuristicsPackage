times = sapply(1:24, function(x) paste('Time', x))
expand.grid(rooms, meetings, times)
names(data) = c('Meeting', 'Room', 'Time')
colnames(data) = c('Meeting', 'Room', 'Time')
data = as.data.frame(expand.grid(meetings, rooms, times))
colnames(data) = c('Meeting', 'Room', 'Time')
data
HW3_AHP = matrix([[1, 9, 7], [1/9, 1, 1/5], [1/7, 5, 1]])
HW3_AHP = matrix[[1, 9, 7], [1/9, 1, 1/5], [1/7, 5, 1])
HW3_AHP = matrix([1, 9, 7, 1/9, 1, 1/5, 1/7, 5, 1], 3, 3, byrow=TRUE)
HW3_AHP = matrix(c(1, 9, 7, 1/9, 1, 1/5, 1/7, 5, 1), 3, 3, byrow=TRUE)
HW3_AHP
eigen(HW3_AHP)
mat_eigval = eigen(HW3_AHP)
HW3_AHP[1]
,1
HW3_AHP[0]
HW3_AHP
[[,1]]
HW3_AHP[[,1]]
HW3_AHP[1][1,]
HW3_AHP
HW3_AHP[1,]
lapply(HW3_AHP[,1], function(x) x/sum(HW3_AHP[,1]))
test = matrix(c(1,3,5,1/3,1,3,1/5,1/3,1)3,3,byrow=TRUE)
c(1,3,5,1/3,1,3,1/5,1/3,1)
c(1,3,5,1/3,1,3,1/5,1/3,1)
test = matrix(c(1,3,5,1/3,1,3,1/5,1/3,1),3,3,byrow=TRUE)
lapply(test[,1], function(x) x/sum(test[,1]))
lapply(test[,2], function(x) x/sum(test[,1]))
lapply(test[,2], function(x) x/sum(test[,2]))
HW3_AHP_norm[,1] = lapply(HW3_AHP[,1], function(x) x/sum(HW3_AHP[,1]))
matrix(3,3,byrow=TRUE)
matrix(rep(0,3), 3, 3,byrow=TRUE)
HW3_AHP_norm[,1] = lapply(HW3_AHP[,1], function(x) x/sum(HW3_AHP[,1]))
HW3_AHP_norm = matrix(rep(0,3), 3, 3,byrow=TRUE)
HW3_AHP_norm[,1] = lapply(HW3_AHP[,1], function(x) x/sum(HW3_AHP[,1]))
HW3_AHP_norm[,2] = lapply(HW3_AHP[,2], function(x) x/sum(HW3_AHP[,2]))
HW3_AHP_norm[,0]
HW3_AHP_norm[,1]
HW3_AHP_norm = matrix(rep(0,3), 3, 3,byrow=TRUE)
HW3_AHP_norm
HW3_AHP_norm[,1]
lapply(HW3_AHP[,1], function(x) x/sum(HW3_AHP[,1]))
HW3_AHP_norm[,1] = sapply(HW3_AHP[,1], function(x) x/sum(HW3_AHP[,1]))
HW3_AHP_norm
HW3_AHP_norm = matrix(rep(0,3), 3, 3,byrow=TRUE)
HW3_AHP_norm[,1] = sapply(HW3_AHP[,1], function(x) x/sum(HW3_AHP[,1]))
HW3_AHP_norm[,2] = sapply(HW3_AHP[,2], function(x) x/sum(HW3_AHP[,2]))
HW3_AHP_norm[,3] = sapply(HW3_AHP[,3], function(x) x/sum(HW3_AHP[,3]))
w_1 = prod(HW3_AHP_norm[1, ])^(1/len(HW3_AHP_norm[1, ]))
w_1 = prod(HW3_AHP_norm[1, ])^(1/length(HW3_AHP_norm[1, ]))
w_1
HW3_AHP = matrix(c(1,3,5,1/3,1,3,1/5,1/3,1),3,3,byrow=TRUE)
HW3_AHP_norm = matrix(rep(0,3), 3, 3,byrow=TRUE)
HW3_AHP_norm[,1] = sapply(HW3_AHP[,1], function(x) x/sum(HW3_AHP[,1]))
HW3_AHP_norm[,2] = sapply(HW3_AHP[,2], function(x) x/sum(HW3_AHP[,2]))
HW3_AHP_norm[,3] = sapply(HW3_AHP[,3], function(x) x/sum(HW3_AHP[,3]))
HW3_AHP_norm
# > Calculate geometric means
w_1 = prod(HW3_AHP_norm[1, ])^(1/length(HW3_AHP_norm[1, ]))
w_1 = prod(HW3_AHP_norm[1, ])^(1/length(HW3_AHP_norm[1, ]))
w_1 = prod(HW3_AHP_norm[1, ])^(1/length(HW3_AHP_norm[1, ]))
w_1
# > Calculate geometric means
w_1 = prod(HW3_AHP_norm[1, ])^(1/length(HW3_AHP_norm[1, ]))
w_2 = prod(HW3_AHP_norm[2, ])^(1/length(HW3_AHP_norm[1, ]))
w_3 = prod(HW3_AHP_norm[3, ])^(1/length(HW3_AHP_norm[1, ]))
w_1
w_2
w_3
HW3_AHP = matrix(c(1, 9, 7, 1/9, 1, 1/5, 1/7, 5, 1), 3, 3, byrow=TRUE)
mat_eigval = eigen(HW3_AHP)
HW3_AHP_norm = matrix(rep(0,3), 3, 3,byrow=TRUE)
HW3_AHP_norm[,1] = sapply(HW3_AHP[,1], function(x) x/sum(HW3_AHP[,1]))
HW3_AHP_norm[,2] = sapply(HW3_AHP[,2], function(x) x/sum(HW3_AHP[,2]))
HW3_AHP_norm[,3] = sapply(HW3_AHP[,3], function(x) x/sum(HW3_AHP[,3]))
HW3_AHP_norm
# Part b. Compute geometric mean
# > Normalize matrix columns
HW3_AHP_norm = matrix(rep(0,3), 3, 3,byrow=TRUE)
HW3_AHP_norm[,1] = sapply(HW3_AHP[,1], function(x) x/sum(HW3_AHP[,1]))
HW3_AHP_norm[,2] = sapply(HW3_AHP[,2], function(x) x/sum(HW3_AHP[,2]))
HW3_AHP_norm[,3] = sapply(HW3_AHP[,3], function(x) x/sum(HW3_AHP[,3]))
HW3_AHP_norm
# Part b. Compute geometric mean
# > Normalize matrix columns
HW3_AHP_norm = matrix(rep(0,3), 3, 3,byrow=TRUE)
HW3_AHP_norm[,1] = sapply(HW3_AHP[,1], function(x) x/sum(HW3_AHP[,1]))
HW3_AHP_norm[,2] = sapply(HW3_AHP[,2], function(x) x/sum(HW3_AHP[,2]))
HW3_AHP_norm[,3] = sapply(HW3_AHP[,3], function(x) x/sum(HW3_AHP[,3]))
HW3_AHP_norm
# > Calculate geometric means
w_1 = prod(HW3_AHP_norm[1, ])^(1/length(HW3_AHP_norm[1, ]))
w_2 = prod(HW3_AHP_norm[2, ])^(1/length(HW3_AHP_norm[1, ]))
w_3 = prod(HW3_AHP_norm[3, ])^(1/length(HW3_AHP_norm[1, ]))
paste0('Weights are w_1=', w_1, 'w_2=', w_2, 'w_3=', w_3)
# > Calculate geometric means
w_1 = round(prod(HW3_AHP_norm[1, ])^(1/length(HW3_AHP_norm[1, ])))
w_2 = round(prod(HW3_AHP_norm[2, ])^(1/length(HW3_AHP_norm[2, ])))
w_3 = round(prod(HW3_AHP_norm[3, ])^(1/length(HW3_AHP_norm[3, ])))
paste0('Weights are w_1=', w_1, 'w_2=', w_2, 'w_3=', w_3)
# > Calculate geometric means
w_1 = round(prod(HW3_AHP_norm[1, ])^(1/length(HW3_AHP_norm[1, ])),2)
w_2 = round(prod(HW3_AHP_norm[2, ])^(1/length(HW3_AHP_norm[2, ])),2)
w_3 = round(prod(HW3_AHP_norm[3, ])^(1/length(HW3_AHP_norm[3, ])),2)
paste0('Weights are w_1=', w_1, 'w_2=', w_2, 'w_3=', w_3)
# > Calculate geometric means
w_1 = round(prod(HW3_AHP_norm[1, ])^(1/length(HW3_AHP_norm[1, ])),2)
w_2 = round(prod(HW3_AHP_norm[2, ])^(1/length(HW3_AHP_norm[2, ])),2)
w_3 = round(prod(HW3_AHP_norm[3, ])^(1/length(HW3_AHP_norm[3, ])),2)
paste0('Weights are w_1=', w_1, ', w_2=', w_2, ', w_3=', w_3)
# Part b. Compute geometric mean
# > Normalize matrix columns
HW3_AHP_norm = matrix(rep(0,3), 3, 3,byrow=TRUE)
HW3_AHP_norm[,1] = sapply(HW3_AHP[,1], function(x) x/sum(HW3_AHP[,1]))
HW3_AHP_norm[,2] = sapply(HW3_AHP[,2], function(x) x/sum(HW3_AHP[,2]))
HW3_AHP_norm[,3] = sapply(HW3_AHP[,3], function(x) x/sum(HW3_AHP[,3]))
HW3_AHP_norm
# > Calculate geometric means
w_1 = round(prod(HW3_AHP_norm[1, ])^(1/length(HW3_AHP_norm[1, ])),2)
w_2 = round(prod(HW3_AHP_norm[2, ])^(1/length(HW3_AHP_norm[2, ])),2)
w_3 = round(prod(HW3_AHP_norm[3, ])^(1/length(HW3_AHP_norm[3, ])),2)
paste0('Weights are w_1=', w_1, ', w_2=', w_2, ', w_3=', w_3)
length(HW3_AHP)
dim(HW3_AHP)[0]
dims(HW3_AHP)[0]
dim(HW3_AHP)
dim(HW3_AHP)[1]
mat_eigval = eigen(HW3_AHP)
n = dim(HW3_AHP)[1]
c_i = (mat_eigval-n)/(n-1)
mat_eigval
max_eigval = max(eigen(HW3_AHP)$values)
eigen(HW3_AHP)$values
max(eigen(HW3_AHP)$values)
HW3_AHP = matrix(c(1, 9, 7, 1/9, 1, 1/5, 1/7, 5, 1), 3, 3, byrow=TRUE)
matrix_eigvals = eigen(HW3_AHP)$values
max_eigval = max(matrix_eigvals)
matrix_eigvals = eigen(HW3_AHP)$values
matrix_eigvals = eigen(HW3_AHP)
matrix_eigvals
max(matrix_eigvals$values)
matrix_eig = eigen(HW3_AHP)
eigenvalues = matrix_eig$values
eigenvalues
max(eigenvalues)
sapply(matrix_eig$values, function(x) x)
eigenvalues = sapply(matrix_eig$values, function(x) x)
max(eigenvalues)
eigenvalues = sapply(matrix_eig$values, function(x) as.numeric(x))
matrix_eig = eigen(HW3_AHP)
eigenvalues = sapply(matrix_eig$values, function(x) as.numeric(x))
max(eigenvalues)
HW3_AHP = matrix(c(1, 9, 7, 1/9, 1, 1/5, 1/7, 5, 1), 3, 3, byrow=TRUE)
matrix_eig = eigen(HW3_AHP)
# > The eigevalues had imaginary values i
eigenvalues = sapply(matrix_eig$values, function(x) as.numeric(x))
max_eigenvalue = max(eigenvalues)
max_eigenvalue
n = dim(HW3_AHP)[1]
c_i = (mat_eigval-n)/(n-1)
c_i = (max_eigenvalue-n)/(n-1)
c_i
CR
CR = c_i/0.52
CR
CR
CR = c_i/0.52
CR <= 0.1
CR = c_i/0.52
CR
CR <= 0.1
# Part c. Compute consistency ratio
# > Recall the eigenvalues from above
max_eigenvalue
n = dim(HW3_AHP)[1]
c_i = (max_eigenvalue-n)/(n-1)
c_i
# > From provided table, random index is R.I. = 0.52
# > Consistency Ratio (CR) is C.I/R.I. A CR <= 0.1
#   indicates sufficient consistency
CR = c_i/0.52
CR
CR <= 0.1
v_pa = 300
v_pb = 240
v_pc = 280
v_pd = 240
v_ma = 15
v_mb = 21
v_rc = 8
v_rd = 15
ratio__w_p_w_m = (v_mb - v_ma)/(v_pa - v_pb)
ratio__w_p_w_m
ratio__w_p_w_r = (v_rd - v_rc)/(v_pc - v_pd)
ratio__w_p_w_r
v_pa = 300
v_pb = 240
v_pc = 280
v_pd = 240
v_ma = 15
v_mb = 21
v_rc = 8
v_rd = 15
ratio__w_p_w_m = (v_mb - v_ma)/(v_pa - v_pb)
ratio__w_p_w_m
ratio__w_p_w_r = (v_rd - v_rc)/(v_pc - v_pd)
ratio__w_p_w_r
# Problem 1
v_pa = 300
v_pb = 240
v_pc = 280
v_pd = 240
v_ma = 15
v_mb = 21
v_rc = 8
v_rd = 15
ratio__w_p_w_m = (v_mb - v_ma)/(v_pa - v_pb)
ratio__w_p_w_m
ratio__w_p_w_r = (v_rd - v_rc)/(v_pc - v_pd)
ratio__w_p_w_r
1/1.275
(0.1*0.79)
(0.175*0.79)
(1/1.275)+(0.1*0.79)+(0.175*0.79)
ratio__w_m_w_c = (v_ca - v_cb)/(v_mb - v_ma)
v_ma = 6
v_mb = 12
v_ca = 700
v_cb = 350
v_cc = 1000
v_cd = 8000
v_vc = 0.95
v_vd = 0.8
ratio__w_m_w_c = (v_ca - v_cb)/(v_mb - v_ma)
ratio__w_m_w_c
(v_cb - v_ca)/(v_ma - v_mb)
(v_cb - v_ca)
(v_ma - v_mb)
ratio__w_m_w_c = (v_cb - v_ca)/(v_ma - v_mb)
ratio__w_m_w_c
ratio__w_c_w_v = (v_vc - v_vd)/(v_cd - v_cc)
ratio__w_c_w_v
# Problem 2
v_ma = 6
v_mb = 12
v_ca = 700
v_cb = 350
v_cc = 1000
v_cd = 8000
v_vc = 0.95
v_vd = 0.8
ratio__w_m_w_c = (v_cb - v_ca)/(v_ma - v_mb)
ratio__w_m_w_c
ratio__w_c_w_v = (v_vc - v_vd)/(v_cd - v_cc)
ratio__w_c_w_v
1/0.0000214
46728.97+58.33
1/(46728.97+58.33)
58.33*0.0000213
46728.97*0.0000213
library(tidyverse)
ratings = data.frame(Candidate=c(1,2,3),
Education=c(3,2,1),
Appearance=c(3,1,2),
Courses=c(5,10,0),
Articles=c(10,0,20),
Grants=c(25000,100000,30000))
ratings
sapply(ratings, function(x) sapply(x, function(i) i/sum(x)))
sapply(ratings['Education'], function(x) x/3-1)
sapply(ratings['Appearance'], function(x) x/1-3)
sapply(ratings['Appearance'], function(x) (x-3)/(1-3))
sapply(ratings['Education'], function(x) (x-3)/(3-1))
sapply(ratings['Education'], function(x) (x-1)/(3-1))
ratings['Education'] = sapply(ratings['Education'], function(x) (x-1)/(3-1))
ratings['Appearance'] = sapply(ratings['Appearance'], function(x) (x-3)/(1-3))
ratings['Courses'] = sapply(ratings['Courses'], function(x) (x-0)/(10-0))
ratings['Articles'] = sapply(ratings['Articles'], function(x) (x-0)/(20-0))
ratings['Grants'] = sapply(ratings['Grants'], function(x) (x-25000)/(100000-250000))
ratings
# Problem 1, Part a
ratings = data.frame(Candidate=c(1,2,3),
Education=c(3,2,1),
Appearance=c(3,1,2),
Courses=c(5,10,0),
Articles=c(10,0,20),
Grants=c(25000,100000,30000))
ratings['Education'] = sapply(ratings['Education'], function(x) (x-1)/(3-1))
ratings['Appearance'] = sapply(ratings['Appearance'], function(x) (x-3)/(1-3))
ratings['Courses'] = sapply(ratings['Courses'], function(x) (x-0)/(10-0))
ratings['Articles'] = sapply(ratings['Articles'], function(x) (x-0)/(20-0))
ratings['Grants'] = sapply(ratings['Grants'], function(x) (x-25000)/(100000-25000))
ratings
ratings[3,]
weights[0]
weights = c(0.7, 0.3, 0.2, 0.4, 0.4)
weights[0]
weights[1]
weights[1]*ratings['Education'] + weights[2]*ratings['Appearance'] +
weights[3]*ratings['Courses'] + weights[4]*ratings['Articles'] +
weights[5]*ratings['Grants']
weights[1]*ratings['Education'] + weights[2]*ratings['Appearance']
weights[1]*ratings['Education']
weights[2]*ratings['Appearance']
ratings['Appearance']
weights[1]*ratings['Education'] + weights[2]*ratings['Appearance']
weights[1]*ratings['Education']
ratings['Score'] = weights[1]*ratings['Education'] + weights[2]*ratings['Appearance'] +
weights[3]*ratings['Courses'] + weights[4]*ratings['Articles'] +
weights[5]*ratings['Grants']
ratings['Score']
ratings
w_arts = 1.0
w_grants = 0.9*w_arts
w_edu = 0.5*w_arts
w_cours = 0.3*w_arts
w_app = 0.1*w_arts
w_arts = 1/(1 + 0.9 + 0.5 + 0.3 + 0.1)
w_arts
w_grants = 0.9*w_arts
w_edu = 0.5*w_arts
w_cours = 0.3*w_arts
w_app = 0.1*w_arts
w_grants
w_edu
w_cours
w_app
print("w_arts = ", w_arts , "<br>w_grants = ", w_grants)
w_arts
w_grants
paste("w_arts = ", w_arts , "<br>w_grants = ", w_grants)
paste("w_arts = ", w_arts , "\n w_grants = ", w_grants)
swing_weights = paste("w_arts = ", w_arts , "w_grants = ", w_grants, "w_edu = ", w_grants)
swing_weights
w_arts = 1/(1 + 0.9 + 0.5 + 0.3 + 0.1)
swing_weights = paste("w_arts = ", w_arts , "w_grants = ", w_grants, "w_edu = ", w_edu, "w_cours = ", w_cours, "w_app = ", w_app)
swing_weights
# Problem 2
# Swing weights
w_arts = 1.0
w_grants = 0.9*w_arts
w_edu = 0.5*w_arts
w_cours = 0.3*w_arts
w_app = 0.1*w_arts
w_arts = 1/(1 + 0.9 + 0.5 + 0.3 + 0.1)
swing_weights = paste("w_arts = ", w_arts , "w_grants = ", w_grants, "w_edu = ", w_edu, "w_cours = ", w_cours, "w_app = ", w_app)
swing_weights
ratings = data.frame(Computer = c(1,2,3),
Reliability = c(3,2,5),
Price = c(1500, 2300, 2900),
Speed = c(120, 132, 220),
RAM = c(16,8,32))
ratings
sapply(ratings['Reliability'], function(x) (x-10)/(1-10))
ratings['Reliability'] = sapply(ratings['Reliability'], function(x) (x-10)/(1-10))
ratings['Price'] = sapply(ratings['Price'], function(x) (x-2900)/(1500-2900))
ratings['Speed'] = sapply(ratings['Speed'], function(x) (x-120)/(220-120))
ratings['RAM'] = sapply(ratings['RAM'], function(x) (x-8)/(32-8))
ratings
ratings['Score'] = weights[1]*ratings['Reliability'] + weights[2]*ratings['Price'] +
weights[3]*ratings['Speed'] + weights[4]*ratings['RAM']
ratings
weights = c(0.45*0.6, 0.45*0.4, 0.55*0.25, 0.55*0.75)
ratings = data.frame(Computer = c(1,2,3),
Reliability = c(3,2,5),
Price = c(1500, 2300, 2900),
Speed = c(120, 132, 220),
RAM = c(16,8,32))
# Scale measures
ratings['Reliability'] = sapply(ratings['Reliability'], function(x) (x-10)/(1-10))
ratings['Price'] = sapply(ratings['Price'], function(x) (x-2900)/(1500-2900))
ratings['Speed'] = sapply(ratings['Speed'], function(x) (x-120)/(220-120))
ratings['RAM'] = sapply(ratings['RAM'], function(x) (x-8)/(32-8))
ratings
# Compute weighted score
ratings['Score'] = weights[1]*ratings['Reliability'] + weights[2]*ratings['Price'] +
weights[3]*ratings['Speed'] + weights[4]*ratings['RAM']
ratings
# Swing weights
w_speed = 1.0
w_price = 0.9*w_speed
w_rel = 0.5*w_speed
w_ram = 0.3*w_speed
w_speed = 1/(1 + 0.9 + 0.5 + 0.3)
swing_weights = paste("w_speed = ", w_speed , "w_price = ", w_price, "w_rel = ", w_rel, "w_ram = ", w_ram)
swing_weights
# Problem 1, Part a
weights = c(0.4*0.7, 0.4*0.3, 0.6*0.2, 0.6*0.4, 0.6*0.4)
ratings = data.frame(Candidate=c(1,2,3),
Education=c(3,2,1),
Appearance=c(3,1,2),
Courses=c(5,10,0),
Articles=c(10,0,20),
Grants=c(25000,100000,30000))
# Scale Columns
ratings['Education'] = sapply(ratings['Education'], function(x) (x-1)/(3-1))
ratings['Appearance'] = sapply(ratings['Appearance'], function(x) (x-3)/(1-3))
ratings['Courses'] = sapply(ratings['Courses'], function(x) (x-0)/(10-0))
ratings['Articles'] = sapply(ratings['Articles'], function(x) (x-0)/(20-0))
ratings['Grants'] = sapply(ratings['Grants'], function(x) (x-25000)/(100000-25000))
ratings
# Compute weighted score
ratings['Score'] = weights[1]*ratings['Education'] + weights[2]*ratings['Appearance'] +
weights[3]*ratings['Courses'] + weights[4]*ratings['Articles'] +
weights[5]*ratings['Grants']
# Problem 1, Part a
weights = c(0.4*0.7, 0.4*0.3, 0.6*0.2, 0.6*0.4, 0.6*0.4)
ratings = data.frame(Candidate=c(1,2,3),
Education=c(3,2,1),
Appearance=c(3,1,2),
Courses=c(5,10,0),
Articles=c(10,0,20),
Grants=c(25000,100000,30000))
# Scale Columns
ratings['Education'] = sapply(ratings['Education'], function(x) (x-1)/(3-1))
ratings['Appearance'] = sapply(ratings['Appearance'], function(x) (x-3)/(1-3))
ratings['Courses'] = sapply(ratings['Courses'], function(x) (x-0)/(10-0))
ratings['Articles'] = sapply(ratings['Articles'], function(x) (x-0)/(20-0))
ratings['Grants'] = sapply(ratings['Grants'], function(x) (x-25000)/(100000-25000))
ratings
# Compute weighted score
ratings['Score'] = weights[1]*ratings['Education'] + weights[2]*ratings['Appearance'] +
weights[3]*ratings['Courses'] + weights[4]*ratings['Articles'] +
weights[5]*ratings['Grants']
ratings
# Problem 3
weights = c(0.45*0.6, 0.45*0.4, 0.55*0.25, 0.55*0.75)
ratings = data.frame(Computer = c(1,2,3),
Reliability = c(3,2,5),
Price = c(1500, 2300, 2900),
Speed = c(120, 132, 220),
RAM = c(16,8,32))
# Scale measures
ratings['Reliability'] = sapply(ratings['Reliability'], function(x) (x-10)/(1-10))
ratings['Price'] = sapply(ratings['Price'], function(x) (x-2900)/(1500-2900))
ratings['Speed'] = sapply(ratings['Speed'], function(x) (x-120)/(220-120))
ratings['RAM'] = sapply(ratings['RAM'], function(x) (x-8)/(32-8))
ratings
# Compute weighted score
ratings['Score'] = weights[1]*ratings['Reliability'] + weights[2]*ratings['Price'] +
weights[3]*ratings['Speed'] + weights[4]*ratings['RAM']
ratings
# Problem 4
# Swing weights
w_speed = 1.0
w_price = 0.9*w_speed
w_rel = 0.5*w_speed
w_ram = 0.3*w_speed
w_speed = 1/(1 + 0.9 + 0.5 + 0.3)
swing_weights = paste("w_speed = ", w_speed , "w_price = ", w_price, "w_rel = ", w_rel, "w_ram = ", w_ram)
swing_weights
# Problem 3
weights = c(0.45*0.6, 0.45*0.4, 0.55*0.25, 0.55*0.75)
weights
w_speed = 1.0
w_price = 0.9*w_speed
w_rel = 0.5*w_speed
w_ram = 0.3*w_speed
w_speed = 1/(1 + 0.9 + 0.5 + 0.3)
w_price = 0.9*w_speed
w_rel = 0.5*w_speed
w_ram = 0.3*w_speed
swing_weights = paste("w_speed = ", w_speed , "w_price = ", w_price, "w_rel = ", w_rel, "w_ram = ", w_ram)
swing_weights
# Swing weights
w_arts = 1.0
w_grants = 0.9*w_arts
w_edu = 0.5*w_arts
w_cours = 0.3*w_arts
w_app = 0.1*w_arts
w_arts = 1/(1 + 0.9 + 0.5 + 0.3 + 0.1)
w_grants = 0.9*w_arts
w_edu = 0.5*w_arts
w_cours = 0.3*w_arts
w_app = 0.1*w_arts
swing_weights = paste("w_arts = ", w_arts , "w_grants = ", w_grants, "w_edu = ", w_edu, "w_cours = ", w_cours, "w_app = ", w_app)
swing_weights
# Problem 2
# Swing weights
w_arts = 1.0
w_grants = 0.9*w_arts
w_edu = 0.5*w_arts
w_cours = 0.3*w_arts
w_app = 0.1*w_arts
w_arts = 1/(1 + 0.9 + 0.5 + 0.3 + 0.1)
w_grants = 0.9*w_arts
w_edu = 0.5*w_arts
w_cours = 0.3*w_arts
w_app = 0.1*w_arts
swing_weights = paste("w_arts = ", w_arts , "w_grants = ", w_grants, "w_edu = ", w_edu, "w_cours = ", w_cours, "w_app = ", w_app)
swing_weights
# Problem 4
# Swing weights
w_speed = 1.0
w_price = 0.9*w_speed
w_rel = 0.5*w_speed
w_ram = 0.3*w_speed
w_speed = 1/(1 + 0.9 + 0.5 + 0.3)
w_price = 0.9*w_speed
w_rel = 0.5*w_speed
w_ram = 0.3*w_speed
swing_weights = paste("w_speed = ", w_speed , "w_price = ", w_price, "w_rel = ", w_rel, "w_ram = ", w_ram)
swing_weights
combn(4, 4)
combn(4, 2)
combn(4, 3)
combn(4, 4)
choose(4, 4)
choose(3, 4)
choose(4, 3)
